let currentFilter = "all";
let allTransactions = [];
let currentUser = null;
let unsubscribeTransaction = null;

// ========== AUTH CHECK ==========
firebase.auth().onAuthStateChanged(user => {
  if (!user) {
    window.location.href = "login.html";
  } else {
    currentUser = user;
    activate(document.getElementById('nav-dashboard'), '‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°');
    checkTodaySavingFromTransactions(user.uid);  // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶ö‡ßá‡¶ï
    showUserName(user);                          // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
  }
});

document.addEventListener('DOMContentLoaded', function () {
  const cards = document.querySelectorAll('.summary-card');
  cards.forEach((card, index) => {
    setTimeout(() => {
      card.style.opacity = '1';
      card.style.transform = 'translateY(0)';
    }, 300 * index);
  });

  document.getElementById('nav-dashboard')?.addEventListener('click', () => activate(document.getElementById('nav-dashboard'), '‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°'));
  document.getElementById('nav-forms')?.addEventListener('click', () => activate(document.getElementById('nav-forms'), '‡¶´‡ßç‡¶∞‡¶Æ‡¶∏'));
  document.getElementById('nav-submit')?.addEventListener('click', () => activate(document.getElementById('nav-submit'), '‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®'));
  document.getElementById('nav-filter')?.addEventListener('click', () => activate(document.getElementById('nav-filter'), '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞'));
  document.getElementById('nav-profile')?.addEventListener('click', () => activate(document.getElementById('nav-profile'), '‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø'));
});

// ========== SECTION ACTIVATION ==========
function activate(button, sectionName) {
  document.querySelectorAll('.menu-button').forEach(btn => btn.classList.remove('active'));
  button.classList.add('active');

  const content = document.getElementById('content');
  content.innerHTML = `<p>‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>`;

  switch (sectionName) {
    case '‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø':
      loadProfileInfo();
      break;
    case '‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°':
      loadDashboardSummary();
      break;
    case '‡¶´‡ßç‡¶∞‡¶Æ‡¶∏':
      lonefrom();
      break;
    case '‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞':
      transactionFilter();
      break;
    case '‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶®':
      loadTransactions();
      break;
    default:
      content.innerHTML = `<p>‡¶è‡¶á ‡¶Ö‡¶Ç‡¶∂‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡¶®‡¶ø‡•§</p>`;
  }
}

// ========== ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶ö‡ßá‡¶ï ==========
async function checkTodaySavingFromTransactions(uid) {
  const now = new Date();

  // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ yyyy-mm-dd ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá
  const year = now.getFullYear();
  const month = (now.getMonth() + 1).toString().padStart(2, '0');
  const day = now.getDate().toString().padStart(2, '0');
  const today = `${year}-${month}-${day}`;

  // ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü (‡ßß-‡ßÆ-‡ß®‡ß´ ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã)
  const todayFormattedForMsg = `${convertToBanglaNumber(day)}-${convertToBanglaNumber(month)}-${convertToBanglaNumber(year.toString().slice(2))}`;

  try {
    const transactionsRef = firebase.firestore()
      .collection("users")
      .doc(uid)
      .collection("transactions");

    // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶ö‡ßá‡¶ï
    const todaySnapshot = await transactionsRef
      .where("category", "==", "‡¶∏‡¶û‡ßç‡¶ö‡ßü")
      .where("date", "==", today)
      .get();

    const statusDiv = document.getElementById('today-saving-status');
    if (!statusDiv) return;

    // ‡¶Ü‡¶ú ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ï‡ßü‡¶¶‡¶ø‡¶® ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá (‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ß‡¶∞‡ßá)
    const totalSnapshot = await transactionsRef
      .where("category", "==", "‡¶∏‡¶û‡ßç‡¶ö‡ßü")
      .get();
    const dayCount = totalSnapshot.size;

    if (!todaySnapshot.empty) {
      // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá

      // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®‡¶ü‡¶ø n ‡¶§‡¶Æ ‡¶¶‡¶ø‡¶®
      const todayDayNumber = dayCount;

      // ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶ì ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü
      const tomorrowDate = new Date(now);
      tomorrowDate.setDate(tomorrowDate.getDate() + 1);
      const tomorrowFormatted = new Intl.DateTimeFormat('bn-BD', {
        year: 'numeric', month: '2-digit', day: '2-digit'
      }).format(tomorrowDate);

      // ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ n ‡¶§‡¶Æ ‡¶¶‡¶ø‡¶® ‡¶ì ‡¶∏‡¶û‡ßç‡¶ö‡ßü‡ßá‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ (‡¶¨‡¶ø‡¶ú‡ßã‡ßú ‡¶∏‡ßÇ‡¶§‡ßç‡¶∞)
      const tomorrowDayNumber = todayDayNumber + 1;
      const tomorrowSavingAmount = 2 * tomorrowDayNumber - 1;

      const tomorrowText = `‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤ (${tomorrowFormatted}) - ${convertToBanglaNumber(tomorrowDayNumber)}‡¶§‡¶Æ ‡¶¶‡¶ø‡¶®, ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶π‡¶¨‡ßá <strong>${convertToBanglaNumber(tomorrowSavingAmount)} ‡¶ü‡¶æ‡¶ï‡¶æ</strong>‡•§`;

      statusDiv.className = 'success';
      statusDiv.innerHTML = `<div class="scroll-text">‚úÖ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ (${todayFormattedForMsg}) ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ${tomorrowText}</div>`;

    } else {
      // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶®‡ßá‡¶á, ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá‡¶®‡¶æ

      // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶® n ‡¶§‡¶Æ ‡¶¶‡¶ø‡¶® ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ (‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ ‡¶Ü‡¶ú ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡¶®‡¶ø, ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶π‡¶¨‡ßá dayCount+1)
      const todayDayNumber = dayCount + 1;
      const todaySavingAmount = 2 * todayDayNumber - 1;

      statusDiv.className = 'warning';
      statusDiv.innerHTML = `<div class="scroll-text">‚ö†Ô∏è ${todayFormattedForMsg} ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶ú‡¶Æ‡¶æ ‡¶π‡ßü‡¶®‡¶ø‡•§ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∏‡¶û‡ßç‡¶ö‡ßü‡ßá‡¶∞ ‡¶ü‡¶æ‡¶ï‡¶æ: <strong>${convertToBanglaNumber(todaySavingAmount)}</strong> ‡¶ü‡¶æ‡¶ï‡¶æ‡•§</div>`;
    }

  } catch (error) {
    console.error("‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
    const statusDiv = document.getElementById('today-saving-status');
    if (statusDiv) {
      statusDiv.className = 'error';
      statusDiv.innerHTML = `<div class="scroll-text">‚ùå ‡¶∏‡¶û‡ßç‡¶ö‡ßü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§</div>`;
    }
  }
}

function convertToBanglaNumber(number) {
  const banglaDigits = '‡ß¶‡ßß‡ß®‡ß©‡ß™‡ß´‡ß¨‡ß≠‡ßÆ‡ßØ';
  return number.toString().replace(/[0-9]/g, d => banglaDigits[d]);
}
// ========== ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ==========
function showUserName(user) {
  const userNameDiv = document.getElementById('user-name');

  if (!userNameDiv) return; // ‡¶Ø‡¶¶‡¶ø div ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá

  if (user.displayName) {
    userNameDiv.textContent = `‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ${user.displayName} üôå`;
  } else {
    firebase.firestore()
      .collection('users')
      .doc(user.uid)
      .get()
      .then(doc => {
        if (doc.exists && doc.data().name) {
          userNameDiv.textContent = `‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ${doc.data().name} üôå`;
        } else {
          userNameDiv.textContent = `‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ üôå`;
        }
      })
      .catch(err => {
        console.error("‡¶®‡¶æ‡¶Æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", err);
        userNameDiv.textContent = `‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ üôå`;
      });
  }
}
